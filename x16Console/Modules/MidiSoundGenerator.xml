<?xml version="1.0" encoding="utf-8"?>

<scope
	xmlns="http://metalx.org/Program"
	xmlns:cpu="http://metalx.org/Mos/6502/Operators"
	xmlns:mem="http://metalx.org/6502/Functions/Memory"
	xmlns:str="http://metalx.org/6502/Functions/String"
	xmlns:mm="http://metalx.org/6502/Functions/MemoryManager"
	xmlns:clsf="http://metalx.org/C64/Functions/Class"
	xmlns:cls="http://metalx.org/Class"
	xmlns:scr="http://metalx.org/x16Console/Functions/Screen"
	xmlns:ascii="http://metalx.org/Ansi/Ascii"
	xmlns:petscii="http://metalx.org/Commodore64/Petscii"
	xmlns:var="http://metalx.org/Variable">

	<label id="VoiceChannels" offset="0440"/>
	<label id="VoiceNotes" offset="0450"/>

	<label id="reset" export="MidiSoundGenerator.Reset">
		<cpu:CopyImmediate8ToXIndex/>
		<byte>16</byte>

		<cpu:CopyImmediate8ToYIndex/>
		<byte>0</byte>

		<cpu:CopyImmediate8ToAccumulator/>
		<addressOf ref="VoiceChannels" type="Absolute16Low8"/>

		<cpu:CopyAccumulatorToImmediate8Address/>
		<hex>22</hex>

		<cpu:CopyImmediate8ToAccumulator/>
		<addressOf ref="VoiceChannels" type="Absolute16High8"/>

		<cpu:CopyAccumulatorToImmediate8Address/>
		<hex>23</hex>

		<cpu:CopyImmediate8ToAccumulator/>
		<hex>ff</hex>

		<label id="clearVoices_loop"/>

		<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
		<hex>22</hex>

		<cpu:IncrementYIndex/>

		<cpu:DecrementXIndex/>

		<cpu:BranchToRelative8IfNotZero/>
		<addressOf ref="clearVoices_loop" type="Relative8"/>

		<cpu:ReturnFromSubroutine/>
	</label>

	<label id="update" export="MidiSoundGenerator.Update">
		<scope>
			<cpu:CopyImmediate8ToAccumulator/>
			<byte>16</byte>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>22</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>23</hex>

			<label id="forEachVoice"/>

			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>23</hex>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="VoiceChannels" type='Absolute16'/>

			<cpu:CompareAccumulatorToImmediate8/>
			<byte>9</byte>

			<cpu:BranchToRelative8IfNotEqual/>
			<addressOf ref="nextVoice" type="Relative8"/>

			<cpu:CopyYIndexToAccumulator/>

			<cpu:ShiftAccumulatorLeft/>
			<cpu:ShiftAccumulatorLeft/>

			<cpu:CopyAccumulatorToYIndex/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="SoundGenerator.Volume" type="Absolute16"/>

			<cpu:AndAccumulatorWithImmediate8/>
			<binary>00111111</binary>

			<cpu:SetCarryFlag/>

			<cpu:SubtractImmediate8FromAccumulator/>
			<byte>2</byte>

			<cpu:BranchToRelative8IfNegative/>
			<addressOf ref="voiceOff" type="Relative8"/>

			<cpu:OrAccumulatorWithImmediate8/>
			<binary>11000000</binary>

			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="SoundGenerator.Volume" type="Absolute16"/>
			
			<cpu:JumpToImmediate16Address/>
			<addressOf ref="nextVoice" type="Absolute16"/>
			
			<label id="voiceOff"/>
			
			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>
			
			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="SoundGenerator.Volume" type="Absolute16"/>
			
			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>23</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<hex>ff</hex>
			
			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="VoiceChannels" type='Absolute16'/>

			<label id="nextVoice"/>

			<cpu:IncrementImmediate8Address/>
			<hex>23</hex>

			<cpu:DecrementImmediate8Address/>
			<hex>22</hex>

			<cpu:BranchToRelative8IfNotZero/>
			<addressOf ref="forEachVoice" type="Relative8"/>

			<cpu:ReturnFromSubroutine/>
		</scope>
	</label>

	<label id="processEvent" export="MidiSoundGenerator.ProcessEvent">
		<cpu:CopyImmediate16AddressToAccumulator/>
		<addressOf ref="Midi.Status" type="Absolute16"/>

		<cpu:CompareAccumulatorToImmediate8/>
		<hex>f0</hex>

		<cpu:BranchToRelative8IfNotEqual/>
		<addressOf ref="notSystem" type="Relative8"/>

		<cpu:ReturnFromSubroutine/>

		<label id="notSystem"/>

		<cpu:AndAccumulatorWithImmediate8/>
		<hex>f0</hex>

		<cpu:CompareAccumulatorToImmediate8/>
		<hex>80</hex>

		<cpu:BranchToRelative8IfEqual/>
		<addressOf ref="noteOff" type="Relative8"/>

		<cpu:CompareAccumulatorToImmediate8/>
		<hex>90</hex>

		<cpu:BranchToRelative8IfEqual/>
		<addressOf ref="noteOn" type="Relative8"/>

		<cpu:ReturnFromSubroutine/>

		<label id="noteOn"/>

		<!--Check Velocity-->
		<cpu:CopyImmediate16AddressToAccumulator/>
		<addressOf ref="Midi.Value2" type="Absolute16"/>

		<cpu:CompareAccumulatorToImmediate8/>
		<byte>0</byte>

		<cpu:BranchToRelative8IfEqual/>
		<addressOf ref="noteOff" type="Relative8"/>

		<cpu:CopyImmediate16AddressToAccumulator/>
		<addressOf ref="Midi.Status" type="Absolute16"/>

		<cpu:AndAccumulatorWithImmediate8/>
		<hex>0f</hex>

		<cpu:CompareAccumulatorToImmediate8/>
		<hex>09</hex>

		<cpu:BranchToRelative8IfEqual/>
		<addressOf ref="drumsOn" type="Relative8"/>

		<!--Note On-->
		<cpu:CallImmediate16Address/>
		<addressOf ref="handleNoteOn" type="Absolute16"/>

		<cpu:ReturnFromSubroutine/>

		<label id="noteOff"/>

		<cpu:CopyImmediate16AddressToAccumulator/>
		<addressOf ref="Midi.Status" type="Absolute16"/>

		<cpu:AndAccumulatorWithImmediate8/>
		<hex>0f</hex>

		<cpu:CompareAccumulatorToImmediate8/>
		<hex>09</hex>

		<cpu:BranchToRelative8IfEqual/>
		<addressOf ref="drumsOff" type="Relative8"/>

		<cpu:CallImmediate16Address/>
		<addressOf ref="handleNoteOff" type="Absolute16"/>

		<cpu:ReturnFromSubroutine/>

		<label id="drumsOn"/>

		<cpu:CallImmediate16Address/>
		<addressOf ref="handleDrumOn" type="Absolute16"/>

		<cpu:ReturnFromSubroutine/>

		<label id="drumsOff"/>

		<cpu:CallImmediate16Address/>
		<addressOf ref="handleDrumOff" type="Absolute16"/>

		<cpu:ReturnFromSubroutine/>
	</label>

	<label id="handleNoteOn">
		<!--<cpu:ReturnFromSubroutine/>-->
		
		<scope>
			<cpu:CopyImmediate8ToAccumulator/>
			<string>O</string>

			<cpu:CallImmediate16Address/>
			<addressOf ref="Console.WriteCharacter" type="Absolute16"/>

			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Status" type="Absolute16"/>

			<cpu:AndAccumulatorWithImmediate8/>
			<hex>0f</hex>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2c</hex>

			<!--Find Voice-->
			<cpu:CopyImmediate8ToXIndex/>
			<byte>16</byte>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>0</byte>

			<label id="forEachVoice"/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<cpu:CompareAccumulatorToImmediate8/>
			<hex>ff</hex>

			<cpu:BranchToRelative8IfEqual/>
			<addressOf ref="voiceFound" type="Relative8"/>

			<cpu:IncrementYIndex/>

			<cpu:DecrementXIndex/>

			<cpu:BranchToRelative8IfNotZero/>
			<addressOf ref="forEachVoice" type="Relative8"/>

			<!--No Voice Available-->
			<cpu:ReturnFromSubroutine/>

			<!--<cpu:CopyImmediate8ToYIndex/>
		<byte>0</byte>-->

			<label id="voiceFound"/>

			<cpu:CopyYIndexToImmediate8Address/>
			<hex>2d</hex>

			<!--Get Voice Address-->
			<cpu:CopyYIndexToAccumulator/>

			<cpu:ShiftAccumulatorLeft/>
			<cpu:ShiftAccumulatorLeft/>

			<cpu:ClearCarryFlag/>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16Low8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2e</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16High8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2f</hex>

			<!--Get Note Frequency-->
			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Value" type="Absolute16"/>

			<cpu:ShiftAccumulatorLeft/>

			<cpu:CopyAccumulatorToYIndex/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="notes" type="Absolute16" offset="1"/>

			<cpu:PushAccumulatorToStack/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="notes" type="Absolute16"/>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>0</byte>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<cpu:PullAccumulatorFromStack/>

			<cpu:IncrementYIndex/>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Volume + Left/Right-->
			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Value2" type="Absolute16"/>

			<cpu:ShiftAccumulatorRight/>

			<cpu:OrAccumulatorWithImmediate8/>
			<binary>11000000</binary>

			<cpu:IncrementYIndex/>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Waveform: Pulse Duty: 63-->
			<cpu:CopyImmediate8ToAccumulator/>
			<hex>3f</hex>

			<cpu:IncrementYIndex/>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Update Voice Channel-->
			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>2d</hex>

			<cpu:CopyImmediate8AddressToAccumulator/>
			<hex>2c</hex>

			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<!--Update Voice Note-->
			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Value" type="Absolute16"/>

			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="VoiceNotes" type="Absolute16"/>

			<cpu:ReturnFromSubroutine/>
		</scope>
	</label>

	<label id="handleNoteOff">
		<scope>
			<cpu:CopyImmediate8ToAccumulator/>
			<string>X</string>

			<cpu:CallImmediate16Address/>
			<addressOf ref="Console.WriteCharacter" type="Absolute16"/>

			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Status" type="Absolute16"/>

			<cpu:AndAccumulatorWithImmediate8/>
			<hex>0f</hex>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2c</hex>

			<!--Find Voices-->
			<cpu:CopyImmediate8ToXIndex/>
			<byte>16</byte>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>0</byte>

			<label id="handleNoteOff_forEachVoice"/>

			<cpu:CopyYIndexToImmediate8Address/>
			<hex>2d</hex>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<cpu:CompareAccumulatorToImmediate8Address/>
			<hex>2c</hex>

			<cpu:BranchToRelative8IfNotEqual/>
			<addressOf ref="notVoice" type="Relative8"/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="VoiceNotes" type="Absolute16"/>

			<cpu:CompareAccumulatorToImmediate16Address/>
			<addressOf ref="Midi.Value" type="Absolute16"/>

			<cpu:BranchToRelative8IfNotEqual/>
			<addressOf ref="notVoice" type="Relative8"/>

			<!--Get Voice Address-->
			<cpu:CopyYIndexToAccumulator/>

			<cpu:ShiftAccumulatorLeft/>
			<cpu:ShiftAccumulatorLeft/>

			<cpu:ClearCarryFlag/>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16Low8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2e</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16High8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2f</hex>

			<!--Voice Off-->
			<cpu:CopyXIndexToAccumulator/>
			<cpu:PushAccumulatorToStack/>

			<cpu:CopyImmediate8ToAccumulator/>
			<string>!</string>

			<cpu:CallImmediate16Address/>
			<addressOf ref="Console.WriteCharacter" type="Absolute16"/>

			<cpu:PullAccumulatorFromStack/>
			<cpu:CopyAccumulatorToXIndex/>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>2</byte>

			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Clear Voice Channel-->
			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>2d</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<hex>ff</hex>

			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<!--<cpu:ReturnFromSubroutine/>-->

			<label id="notVoice"/>

			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>2d</hex>

			<cpu:IncrementYIndex/>

			<cpu:DecrementXIndex/>

			<cpu:BranchToRelative8IfNotZero/>
			<addressOf ref="handleNoteOff_forEachVoice" type="Relative8"/>

			<cpu:ReturnFromSubroutine/>
		</scope>
	</label>

	<label id="handleDrumOn">
		<scope>
			
			<!--<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Value" type="Absolute16"/>
			
			<cpu:CompareAccumulatorToImmediate8/>
			<hex>2d</hex>
			
			<cpu:BranchToRelative8IfEqual/>
			<addressOf ref="go" type="Relative8"/>
			
			<cpu:ReturnFromSubroutine/>
			
			<label id="go"/>-->
			
			<cpu:CopyImmediate8ToAccumulator/>
			<string>*</string>

			<cpu:CallImmediate16Address/>
			<addressOf ref="Console.WriteCharacter" type="Absolute16"/>

			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Status" type="Absolute16"/>

			<cpu:AndAccumulatorWithImmediate8/>
			<hex>0f</hex>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2c</hex>

			<!--Find Voice-->
			<cpu:CopyImmediate8ToXIndex/>
			<byte>16</byte>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>0</byte>

			<label id="forEachVoice"/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<cpu:CompareAccumulatorToImmediate8/>
			<hex>ff</hex>

			<cpu:BranchToRelative8IfEqual/>
			<addressOf ref="voiceFound" type="Relative8"/>

			<cpu:IncrementYIndex/>

			<cpu:DecrementXIndex/>

			<cpu:BranchToRelative8IfNotZero/>
			<addressOf ref="forEachVoice" type="Relative8"/>

			<!--No Voice Available-->
			<cpu:ReturnFromSubroutine/>

			<!--<cpu:CopyImmediate8ToYIndex/>
		<byte>0</byte>-->

			<label id="voiceFound"/>

			<cpu:CopyYIndexToImmediate8Address/>
			<hex>2d</hex>

			<!--Get Voice Address-->
			<cpu:CopyYIndexToAccumulator/>

			<cpu:ShiftAccumulatorLeft/>
			<cpu:ShiftAccumulatorLeft/>

			<cpu:ClearCarryFlag/>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16Low8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2e</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16High8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2f</hex>

			<!--Get Note Frequency-->
			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Value" type="Absolute16"/>

			<cpu:ShiftAccumulatorLeft/>

			<cpu:CopyAccumulatorToYIndex/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="drums" type="Absolute16" offset="1"/>

			<cpu:PushAccumulatorToStack/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="drums" type="Absolute16"/>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>0</byte>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<cpu:PullAccumulatorFromStack/>

			<cpu:IncrementYIndex/>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Volume + Left/Right-->
			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Value2" type="Absolute16"/>

			<cpu:ShiftAccumulatorRight/>

			<cpu:OrAccumulatorWithImmediate8/>
			<binary>11000000</binary>

			<cpu:IncrementYIndex/>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Waveform: Noise Duty: 63-->
			<cpu:CopyImmediate8ToAccumulator/>
			<hex>ff</hex>

			<cpu:IncrementYIndex/>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Update Voice Channel-->
			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>2d</hex>

			<cpu:CopyImmediate8AddressToAccumulator/>
			<hex>2c</hex>

			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<!--Update Voice Note-->
			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Value" type="Absolute16"/>

			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="VoiceNotes" type="Absolute16"/>

			<cpu:ReturnFromSubroutine/>
		</scope>
	</label>

	<label id="handleDrumOff">
		<cpu:ReturnFromSubroutine/>
		
		<scope>
			<cpu:CopyImmediate8ToAccumulator/>
			<string>-</string>

			<cpu:CallImmediate16Address/>
			<addressOf ref="Console.WriteCharacter" type="Absolute16"/>

			<cpu:CopyImmediate16AddressToAccumulator/>
			<addressOf ref="Midi.Status" type="Absolute16"/>

			<cpu:AndAccumulatorWithImmediate8/>
			<hex>0f</hex>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2c</hex>

			<!--Find Voices-->
			<cpu:CopyImmediate8ToXIndex/>
			<byte>16</byte>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>0</byte>

			<label id="handleNoteOff_forEachVoice"/>

			<cpu:CopyYIndexToImmediate8Address/>
			<hex>2d</hex>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<cpu:CompareAccumulatorToImmediate8Address/>
			<hex>2c</hex>

			<cpu:BranchToRelative8IfNotEqual/>
			<addressOf ref="notVoice" type="Relative8"/>

			<cpu:CopyImmediate16PlusYIndexAddressToAccumulator/>
			<addressOf ref="VoiceNotes" type="Absolute16"/>

			<cpu:CompareAccumulatorToImmediate16Address/>
			<addressOf ref="Midi.Value" type="Absolute16"/>

			<cpu:BranchToRelative8IfNotEqual/>
			<addressOf ref="notVoice" type="Relative8"/>

			<!--Get Voice Address-->
			<cpu:CopyYIndexToAccumulator/>

			<cpu:ShiftAccumulatorLeft/>
			<cpu:ShiftAccumulatorLeft/>

			<cpu:ClearCarryFlag/>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16Low8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2e</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>

			<cpu:AddImmediate8ToAccumulator/>
			<addressOf ref="SoundGenerator.Registers" type="Absolute16High8"/>

			<cpu:CopyAccumulatorToImmediate8Address/>
			<hex>2f</hex>

			<!--Voice Off-->
			<cpu:CopyXIndexToAccumulator/>
			<cpu:PushAccumulatorToStack/>

			<cpu:CopyImmediate8ToAccumulator/>
			<string>!</string>

			<cpu:CallImmediate16Address/>
			<addressOf ref="Console.WriteCharacter" type="Absolute16"/>

			<cpu:PullAccumulatorFromStack/>
			<cpu:CopyAccumulatorToXIndex/>

			<cpu:CopyImmediate8ToYIndex/>
			<byte>2</byte>

			<cpu:CopyImmediate8ToAccumulator/>
			<byte>0</byte>

			<cpu:CopyAccumulatorToImmediate8PointerPlusYIndexAddress/>
			<hex>2e</hex>

			<!--Clear Voice Channel-->
			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>2d</hex>

			<cpu:CopyImmediate8ToAccumulator/>
			<hex>ff</hex>

			<cpu:CopyAccumulatorToImmediate16PlusYIndexAddress/>
			<addressOf ref="VoiceChannels" type="Absolute16"/>

			<!--<cpu:ReturnFromSubroutine/>-->

			<label id="notVoice"/>

			<cpu:CopyImmediate8AddressToYIndex/>
			<hex>2d</hex>

			<cpu:IncrementYIndex/>

			<cpu:DecrementXIndex/>

			<cpu:BranchToRelative8IfNotZero/>
			<addressOf ref="handleNoteOff_forEachVoice" type="Relative8"/>

			<cpu:ReturnFromSubroutine/>
		</scope>
	</label>

	<label id="notes">
		<hex>002C</hex>
		<hex>002F</hex>
		<hex>0031</hex>
		<hex>0034</hex>
		<hex>0037</hex>
		<hex>003B</hex>
		<hex>003E</hex>
		<hex>0042</hex>
		<hex>0046</hex>
		<hex>004A</hex>
		<hex>004E</hex>
		<hex>0053</hex>
		<hex>002C</hex>
		<hex>002F</hex>
		<hex>0031</hex>
		<hex>0034</hex>
		<hex>0037</hex>
		<hex>003B</hex>
		<hex>003E</hex>
		<hex>0042</hex>
		<hex>0046</hex>
		<hex>004A</hex>
		<hex>004E</hex>
		<hex>0053</hex>
		<hex>0058</hex>
		<hex>005D</hex>
		<hex>0063</hex>
		<hex>0068</hex>
		<hex>006F</hex>
		<hex>0075</hex>
		<hex>007C</hex>
		<hex>0084</hex>
		<hex>008B</hex>
		<hex>0094</hex>
		<hex>009C</hex>
		<hex>00A6</hex>
		<hex>00B0</hex>
		<hex>00BA</hex>
		<hex>00C5</hex>
		<hex>00D1</hex>
		<hex>00DD</hex>
		<hex>00EA</hex>
		<hex>00F8</hex>
		<hex>0107</hex>
		<hex>0117</hex>
		<hex>0127</hex>
		<hex>0139</hex>
		<hex>014B</hex>
		<hex>015F</hex>
		<hex>0174</hex>
		<hex>018A</hex>
		<hex>01A2</hex>
		<hex>01BA</hex>
		<hex>01D5</hex>
		<hex>01F1</hex>
		<hex>020E</hex>
		<hex>022D</hex>
		<hex>024F</hex>
		<hex>0272</hex>
		<hex>0297</hex>
		<hex>02BE</hex>
		<hex>02E8</hex>
		<hex>0314</hex>
		<hex>0343</hex>
		<hex>0375</hex>
		<hex>03A9</hex>
		<hex>03E1</hex>
		<hex>041C</hex>
		<hex>045B</hex>
		<hex>049D</hex>
		<hex>04E3</hex>
		<hex>052E</hex>
		<hex>057D</hex>
		<hex>05D0</hex>
		<hex>0629</hex>
		<hex>0686</hex>
		<hex>06EA</hex>
		<hex>0753</hex>
		<hex>07C2</hex>
		<hex>0839</hex>
		<hex>08B6</hex>
		<hex>093A</hex>
		<hex>09C7</hex>
		<hex>0A5C</hex>
		<hex>0AF9</hex>
		<hex>0BA0</hex>
		<hex>0C51</hex>
		<hex>0D0D</hex>
		<hex>0DD3</hex>
		<hex>0EA6</hex>
		<hex>0F85</hex>
		<hex>1071</hex>
		<hex>116B</hex>
		<hex>1274</hex>
		<hex>138D</hex>
		<hex>14B7</hex>
		<hex>15F2</hex>
		<hex>1740</hex>
		<hex>18A2</hex>
		<hex>1A19</hex>
		<hex>1BA7</hex>
		<hex>1D4C</hex>
		<hex>1F0A</hex>
		<hex>20E2</hex>
		<hex>22D7</hex>
		<hex>24E9</hex>
		<hex>271B</hex>
		<hex>296E</hex>
		<hex>2BE5</hex>
		<hex>2E81</hex>
		<hex>3145</hex>
		<hex>3433</hex>
		<hex>374D</hex>
		<hex>3A97</hex>
		<hex>3E13</hex>
		<hex>41C4</hex>
		<hex>45AD</hex>
		<hex>49D2</hex>
		<hex>4E36</hex>
		<hex>52DC</hex>
	</label>

	<label id="drums">
		<!--00-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--08-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--10-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--18-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--20-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<!--Acoustic Bass Drum-->
		<hex>0100</hex>
		<!--Bass Drum 1-->
		<hex>0200</hex>
		<!--Side Stick-->
		<hex>3000</hex>
		<!--Acoustic Snare-->
		<hex>8000</hex>
		<!--Hand Clap-->
		<hex>5000</hex>
	
		<!--28-->
		<!--Electric Snare-->
		<hex>2000</hex>
		<!--Low Floor Tom-->
		<hex>0300</hex>
		<!--Closed Hi-hat-->
		<hex>f800</hex>
		<!--High Floor Tom-->
		<hex>0400</hex>
		<!--Pedal Hi-hat-->
		<hex>2000</hex>
		<!--Low Tom-->
		<hex>0500</hex>
		<!--Open Hi-hat-->
		<hex>f000</hex>
		<!--Low-Mid Tom-->
		<hex>0600</hex>
	
		<!--30-->
		<!--Hi-Mid Tom-->
		<hex>0700</hex>
		<!--Crash Cymbal 1-->
		<hex>e000</hex>
		<!--High Tom-->
		<hex>0800</hex>
		<!--Ride Cymbal 1-->
		<hex>e000</hex>
		<!--Chinese Cymbal-->
		<hex>e000</hex>
		<!--Ride Bell-->
		<hex>1500</hex>
		<!--Tambourine-->
		<hex>f000</hex>
		<!--Splash Cymbal-->
		<hex>e000</hex>
	
		<!--38-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--40-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--48-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--50-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--00-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--00-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--00-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--00-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	
		<!--00-->
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
		<hex>2000</hex>
	</label>
</scope>